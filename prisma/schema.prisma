// Prisma schema for Advanced Library Management System
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  role          Role
  emailVerified Boolean        @default(false)
  isDeleted     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  borrowedBooks BorrowedBook[]
  transactions  Transaction[]
}

enum Role {
  ADMIN
  MEMBER
}

model Book {
  id          String         @id @default(uuid())
  isbn        String         @unique
  title       String
  description String?
  copies      Int
  isDeleted   Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  borrowedBy  BorrowedBook[]
  categories  BookCategory[]
  authors     BookAuthor[]
}

model BorrowedBook {
  id         String    @id @default(uuid())
  userId     String
  bookId     String
  borrowedAt DateTime  @default(now())
  dueDate    DateTime
  returnedAt DateTime?
  fine       Float     @default(0)

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@index([userId])
  @@index([bookId])
}

model Transaction {
  id             String   @id @default(uuid())
  userId         String
  borrowedBookId String
  amount         Float
  description    String
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Category {
  id        String         @id @default(uuid())
  name      String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  books     BookCategory[]
}

model Author {
  id        String       @id @default(uuid())
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  books     BookAuthor[]
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model BookCategory {
  id         String @id @default(uuid())
  bookId     String
  categoryId String

  book     Book     @relation(fields: [bookId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@index([bookId])
  @@index([categoryId])
}

model BookAuthor {
  id       String @id @default(uuid())
  bookId   String
  authorId String

  book   Book   @relation(fields: [bookId], references: [id])
  author Author @relation(fields: [authorId], references: [id])

  @@index([bookId])
  @@index([authorId])
}
